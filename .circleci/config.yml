# PHP CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-php/ for more details
#
version: 2
jobs:
  build:
    docker:
      # specify the version you desire here
      #- image: circleci/php:7.1-browsers
      - image: php:5.6-apache
      - image: mysql:5.7
          environment:
            - MYSQL_ROOT_PASSWORD=mysql
            - MYSQL_DATABASE=testdb
      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/mysql:9.4

    working_directory: /var/www/html

    steps:
      - checkout
      - run: echo "hello world"
      - run:
          name: Update packages ...
          command: apt-get update
      - run:
          name: Install packages 1/2 ...
          command: apt-get install -y libmcrypt-dev python-pip libicu-dev libxml2-dev
      - run:
          name: Install packages 2/2 ...
          command: apt-get install -y libxslt1-dev libfreetype6-dev libjpeg62-turbo-dev libpng-dev git vim openssh-server ocaml expect mysql-client
      - run:
          name: Active docker configure gd ...
          command: docker-php-ext-configure gd --with-freetype-dir=/usr/include/ --with-jpeg-dir=/usr/include/
      - run:
          name: Active docker configure hash ...
          command: docker-php-ext-configure hash --with-mhash
      - run:
          name: Install docker php extensions ...
          command: docker-php-ext-install bcmath mcrypt intl json gd pdo_mysql mysql mysqli soap xsl zip
      - run:
          name: Install Composer ...
          command: curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer
      - run:
          name: Install dependences ...
          command: composer install
      - run:
          name: Check lint syntaxis ...
          command: ./vendor/bin/parallel-lint --exclude vendor .
      - run:
          name: Check php unit test ...
          command: ./vendor/bin/phpunit


      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "composer.json" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-

      - run: composer install -n --prefer-dist

      - save_cache:
          paths:
            - ./vendor
          key: v1-dependencies-{{ checksum "composer.json" }}

      # run tests!
      - run: phpunit